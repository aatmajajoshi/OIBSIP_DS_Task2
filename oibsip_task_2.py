# -*- coding: utf-8 -*-
"""OIBSIP Task 2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1cut6O0TgWK-9SBb7MPmSlcgfXxIv-t84

# **Import Libraries**
"""

# Commented out IPython magic to ensure Python compatibility.
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import datetime as dt
import calendar
import plotly.graph_objects as go

import warnings
warnings.filterwarnings("ignore")
# %matplotlib inline

"""# **Load and Explore the Dataset**"""

data = pd.read_csv("/content/Unemployment in India.csv")
data = pd.read_csv("/content/Unemployment_Rate_upto_11_2020.csv")
data

#updating the column names
data.columns=["State","Date","Frequency","Estimated unemployment rate","Estimated employed","Estimated labour participation rate","Region","Longitude","Latitude"]

data.head()

data.tail()

data.shape

data.columns

data.describe()

data.isnull().sum()

data.duplicated().any()

data.State.value_counts()

# Converting "Date" column to Datetime format
data['Date'] = pd.to_datetime(data['Date'],dayfirst=True)

#Converting 'Frequency' and 'Region' columns to categorical data type
data['Frequency'] = data['Frequency'].astype('category')
data['Region'] = data['Region'].astype('category')

"""# **Extracting Month From Date attribute**"""

data['Month']= data['Date'].dt.month

#converting 'month' to integer format
data['Month_int'] = data['Month'].apply(lambda x: int(x))

# Mapping integer month values to abbreviated month names
data['Month_name'] = data['Month_int'].apply(lambda x: calendar.month_abbr[x])

#Dropping the original 'Month' column
data.drop(columns='Month', inplace=True)

data['Month'] = data['Month_int'].apply(lambda x: calendar.month_abbr[x])

data.head()

"""# **Exploratory Data Analysis**"""

#Basic Statistics
data_stats = data[['Estimated unemployment rate', 'Estimated employed', 'Estimated labour participation rate']]
round(data_stats.describe().T, 2)

region_stats = data.groupby(['Region'])[['Estimated unemployment rate', 'Estimated employed',
                                       'Estimated labour participation rate']].mean().reset_index()
round(region_stats, 2)

"""# **Data Visualization**

## **Bar plot of Unemployment rate and Labour participation rate**
"""

IMD = data.groupby(["Month"])[['Estimated unemployment rate','Estimated employed','Estimated labour participation rate']].mean()
IMD = pd.DataFrame(IMD).reset_index()

month = IMD.Month
unemployment_rate = IMD["Estimated unemployment rate"]
labour_participation_rate = IMD["Estimated labour participation rate"]

fig = go.Figure()

fig.add_trace(go.Bar(x=month, y= unemployment_rate, name = "Unemployment Rate"))
fig.add_trace(go.Bar(x= month , y = labour_participation_rate, name = "Labourparticipation Rate"))

fig.update_layout(title = "Unemploymnet Rate and Labour Participation rate ",
                 xaxis= {"categoryorder":"array","categoryarray":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct"]})

fig.show()

"""## **Bar plot of estimated employed citizen in every month**"""

import plotly.express as px

fig = px.bar(IMD, x='Month', y='Estimated employed', color='Month',
            category_orders = {"Month":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct"]},
            title = 'Estimated employed people from Jan 2020 to Oct 2020')

fig.show()

"""# **State Wise Analysis**"""

State = data.groupby("State")[['Estimated unemployment rate','Estimated employed','Estimated labour participation rate']].mean()
State = pd.DataFrame(State).reset_index()

#box Plot

fig = px.box(data,x='State',y='Estimated unemployment rate',color='State',title='Unemployment rate')
fig.update_layout(xaxis={'categoryorder':'total descending'})
fig.show()

"""# **Average Unemployment rate bar plot**"""

fig = px.bar(State, x='State', y='Estimated unemployment rate', color="State",title="Average Unemployment Rate (State)")
fig.update_layout(xaxis={'categoryorder':'total descending'})

fig.show()

"""## **Haryana and Tripura was having the highest average amount of Unemployment Rate**
## **Meghalaya was having the lowest average amount of Unemployment Rate**

# **Correlation Heatmap**
"""

heat_maps = data[["Estimated unemployment rate", "Estimated employed","Estimated labour participation rate",'Longitude','Latitude','Month_int']]
heat_maps = heat_maps.corr()
plt.figure(figsize=(10,5))
sns.set_context("notebook",font_scale=1)
sns.heatmap(heat_maps,annot=True , cmap='coolwarm')

"""# **Scatter Matrix**"""

fig = px.scatter_matrix(data, template='plotly',
                        dimensions=['Estimated unemployment rate', 'Estimated employed', 'Estimated labour participation rate'],
                        color='Region')
fig.show()

"""# **Animated bar plot of Unemployment rate across region from Jan.2020 to Oct.2020**"""

fig = px.bar(data, x='Region', y='Estimated unemployment rate', animation_frame='Month_name', color='State',
             title='Unemployment rate across region from Jan.2020 to Oct.2020', height=700, template='plotly')
fig.update_layout(xaxis={'categoryorder': 'total descending'})
fig.layout.updatemenus[0].buttons[0].args[1]["frame"]["duration"] = 2000
fig.show()

"""# **Sunburst chart**"""

# Sunburst chart showing unemployment rate in each region and state

unemplo_df = data[['State', 'Region', 'Estimated unemployment rate', 'Estimated employed', 'Estimated labour participation rate']]
unemplo = unemplo_df.groupby(['Region', 'State'])['Estimated unemployment rate'].mean().reset_index()
fig = px.sunburst(unemplo, path=['Region', 'State'], values='Estimated unemployment rate',
                  color_continuous_scale='Plasma', title='Unemployment rate in each region and state',
                  height=650, template='ggplot2')
fig.show()

"""# **Monthly unemployment rate**"""

#Impact of Lockdown on States Estimated Employed

fig = px.scatter_geo(data,'Longitude', 'Latitude', color="Region",
                     hover_name="State", size="Estimated unemployment rate",
                     animation_frame="Month_name",scope='asia',template='seaborn',title='Impack of lockdown on Employement across regions')

fig.layout.updatemenus[0].buttons[0].args[1]["frame"]["duration"] = 2000

fig.update_geos(lataxis_range=[5,35], lonaxis_range=[65, 100],oceancolor="lightblue",
    showocean=True)

fig.show()

"""# **Regional Analysis**"""

data.Region.unique()

"""## **Unemployment rate before and after Lockdown**"""

#data representation before and after the lockdown

before_lockdown = data[(data['Month_int']>=1) & (data['Month_int']<4)]
after_lockdown =  data[(data['Month_int']>=4) & (data['Month_int']<=6)]

af_lockdown=after_lockdown.groupby('State')['Estimated unemployment rate'].mean().reset_index()
lockdown= before_lockdown.groupby('State')['Estimated unemployment rate'].mean().reset_index()
lockdown['Unemployment Rate before lockdown'] = af_lockdown['Estimated unemployment rate']

lockdown.columns=['State','Unemployment Rate Before Lockdown','Unemployment Rate After Lockdown']

lockdown.head()

# percentage change in unemployment rate

lockdown['rate change in unemployment'] = round(lockdown['Unemployment Rate After Lockdown'] -lockdown['Unemployment Rate Before Lockdown']/lockdown['Unemployment Rate Before Lockdown'],2)
plot_per = lockdown.sort_values('rate change in unemployment')

# percentage change in unemployment after lockdown

fig = px.bar(plot_per, x='State',y='rate change in unemployment',color='State',
            title='percentage change in Unemployment in each state after lockdown',template='ggplot2')
fig.show()

"""## **Most impacted States/Union Territories**

* Puducherry
* Jharkhand
* Bihar
* Haryana
* Tripura

# **Impact of lockdown on employment across states**
"""

# function to sort value based on impact

def sort_impact(x):
    if x <= 10:
        return 'impacted States'
    elif x <= 20:
        return 'hard impacted States'
    elif x <= 30:
        return 'harder impacted States'
    elif x <= 46:
        return 'hardest impacted States'
    return x

plot_per['impact status'] = plot_per['rate change in unemployment'].apply(lambda x:sort_impact(x))

fig = px.bar(plot_per, y='State',x='rate change in unemployment',color='impact status',
            title='Impact of lockdown on employment across states',template='ggplot2',height=650)


fig.show()